// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  password          String?
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Subscription {
  id             String    @id @default(cuid())
  userId         String    @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  isTrial        Boolean
  isActive       Boolean
  isCanceled     Boolean
  isPaused       Boolean
  isPending      Boolean
  isExpired      Boolean
  isLifetime     Boolean
  subscriptionId String?
  expiresAt      DateTime?
  user           User      @relation(fields: userId, references: id, onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Photographer {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String           @unique
  name            String
  location        String
  bio             String?
  avatar          String?
  website         String?
  instagram       String?
  facebook        String?
  twitter         String?
  youtube         String?
  tiktok          String?
  vimeo           String?
  portfolioImages PortfolioImage[]
  reviews         Review[]
  companyName     String
  events          Event[]
}

model PortfolioImage {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  photographer   Photographer @relation(fields: [photographerId], references: [id], onDelete: Cascade)
  photographerId String
  image          String
  title          String
  description    String?
  tags           String[]
  isFeatured     Boolean
  isDeleted      Boolean      @default(false)
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  targetId  String
}

model Review {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  photographer   Photographer @relation(fields: [photographerId], references: [id], onDelete: Cascade)
  photographerId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  rating         Int
  title          String
  description    String?
}

model MessageThread {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  participants User[]
  messages     Message[]
}

model Message {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  thread    MessageThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId  String
  sender    User          @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId  String
  content   String
  isRead    Boolean       @default(false)
  isDeleted Boolean       @default(false)
}

model User {
  id             String          @id @default(cuid())
  firstName      String
  lastName       String
  handle         String?         @unique
  email          String          @unique
  emailVerified  DateTime?
  profilePic     String?
  phone          String?
  address        String?
  city           String?
  state          String?
  zip            String?
  country        String?
  accounts       Account[]
  sessions       Session[]
  subscription   Subscription?
  photographer   Photographer?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  favorites      Favorite[]
  reviews        Review[]
  messages       Message[]
  messageThreads MessageThread[]
  comments       Comment[]
  stripeId       String?         @unique
  commentLikes   CommentLike[]
  eventLike      EventLike[]
}

model Event {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  photographer   Photographer @relation(fields: [photographerId], references: [id], onDelete: Cascade)
  photographerId String
  title          String
  description    String?
  location       String
  date           DateTime
  duration       Int          @default(1) // In hours
  image          String?
  isFulfilled    Boolean      @default(false)
  isDeleted      Boolean      @default(false)
  comments       Comment[]
  eventLikes     EventLike[]
}

model EventLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isDeleted Boolean  @default(false)
}

model Comment {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  eventId      String
  event        Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  content      String
  isDeleted    Boolean       @default(false)
  commentLikes CommentLike[]
}

model CommentLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isDeleted Boolean  @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
